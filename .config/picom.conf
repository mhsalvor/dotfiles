# vim: ft=conf
#
#          _                                       __
#         (_)                                     / _|
#    _ __  _  ___ ___  _ __ ___    ___ ___  _ __ | |_
#   | '_ \| |/ __/ _ \| '_ ` _ \  / __/ _ \| '_ \|  _|
#   | |_) | | (_| (_) | | | | | || (_| (_) | | | | |
#   | .__/|_|\___\___/|_| |_| |_(_)___\___/|_| |_|_|
#   | |
#   |_|
#
#   ~/.config/picom.conf
#   This is the configuration file for the picom compositor
#
# Wrtitten to work on *most* GNU/Linux distributions.
# Things not working or WIP are commented out. Unless I forgot.
# Much of what follows has been "stolen" from many places over the years and
# tweaked to suit my workflow and personal preferences; feel free to do the same.
#
# Remember, like with all of my work, I am only able to provide the following
# assurance(s):
# It is almost certainly going to work until it breaks; although I have to
# admit it may never work and that would be sad.
# When/if it does break, you may keep all of the pieces.
# If you find my materials helpful, both you & I will be happy, at least for a
# little while.
# My advice is worth every penny you paid for it!
#
# by:
# Giuseppe (mhsalvor) Molinaro
# g.molinaro@linuxmail.org
# https://githup.com/mhsalvor
###
# Thank you code_nomad: http://9m.no/ꪯ鵞
# and Arch Wiki contributors: https://wiki.archlinux.org/index.php/Compton
###


###############################################################################
#                                                                             #
#                           ATTENTION                                         #
#                                                                             #
#   This configuration file is for picom-jonaburg-git and may not function    #
#   with normal picom without some editing.                                   #
#                                                                             #
#   https://github.com/jonaburg/picom                                         #
#                                                                             #
###############################################################################


#=== Backend ===#

# Backend to use: "xrender" or "glx".
# GLX backend is typically much faster but depends on a sane driver.
experimental-backends = true;
backend = "glx";

#=== GLX backend ===#

# Recommended
glx-no-stencil = true;

# GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
# May cause slowdowns with nvidia-drivers and nouveau when true.
# Useful with --glx-swap-method
glx-copy-from-front = false;

# GLX backend: Use MESA_copy_sub_buffer to do partial screen update.
# Tests on nouveau shows a 200% performance boost when only 1/4 of the screen is updated.
# May break VSync and is not available on some drivers.
# Overrides --glx-copy-from-front.
 # glx-use-copysubbuffermesa = false;

# GLX backend: Avoid rebinding pixmap on window damage.
# Probably could improve performance on rapid window content changes, but is
# known to break things on some drivers (LLVMpipe).
# Recommended if it works.
glx-no-rebind-pixmap = true;

# GLX backend: GLX buffer swap method we assume.
# Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
# undefined is the slowest and the safest, and the default value.
# copy is fastest, but may fail on some drivers,
# 2-6 are gradually slower but safer (6 is still faster than 0).
# Usually, double buffer means 2, triple buffer means 3.
# buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
# Useless with --glx-use-copysubbuffermesa.
# Partially breaks --resize-damage.
# Defaults to undefined.
#glx-swap-method = "undefined"; #deprecated !
use-damage = false

#=== Animations ===#

# requires https://github.com/jonaburg/picom
# (These are also the default values)
transition-length = 100
transition-pow-x = 0.1
transition-pow-y = 0.1
transition-pow-w = 0.1
transition-pow-h = 0.1
size-transition = true

#=== Corners ===#

# requires: https://github.com/sdhand/compton or https://github.com/jonaburg/picom
# defaul corner-radius = 10.0
corner-radius = 5.0;
rounded-corners-exclude = [
  "window_type = 'normal'",
  "window_type = 'dock'",
  "class_g = 'awesome'",
  "class_g = 'URxvt'",
  "class_g = 'XTerm'",
  "class_g = 'kitty'",
  "class_g = 'Alacritty'",
  "class_g = 'Polybar'",
  "class_g = 'code-oss'",
  #"class_g = 'TelegramDesktop'",
  "class_g = 'firefox'",
  "class_g = 'Thunderbird'"
];
round-borders = 0;
round-borders-exclude = [
  #"class_g = 'TelegramDesktop'",
];

#=== Shadows ====#

# Enabled client-side shadows on windows. Note desktop windows
# (windows with '_NET_WM_WINDOW_TYPE_DESKTOP') never get shadow,
# unless explicitly requested using the wintypes option.
# default: false
shadow = true;

# The blur radius for shadows. (default 12)
shadow-radius = 5;
# The left offset for shadows. (default -15)
shadow-offset-x = 1;
# The top offset for shadows. (default -15)
shadow-offset-y = 1;
# The translucency for shadows. (default .75)
shadow-opacity = 0.3;

# Set if you want different colour shadows
# shadow-red = 0.0;
# shadow-green = 0.0;
# shadow-blue = 0.0;
# The shadow exclude options are helpful if you have shadows enabled.
# Due to the way picom draws its shadows, certain applications will have visual glitches
# (most applications are fine, only apps that do weird things with xshapes or argb are affected).
# This list includes all the affected apps I found in my testing.
# The "! name~=''" part excludes shadows on any "Unknown" windows,
# this prevents a visual glitch with the XFWM alt tab switcher.
shadow-exclude = [
    "! name~=''",
    "name = 'Notification'",
    "name = 'Plank'",
    "name = 'Docky'",
    "name = 'Kupfer'",
    "name = 'xfce4-notifyd'",
    "name *= 'VLC'",
    "name *= 'compton'",
    "name *= 'picom'",
    "name *= 'Chromium'",
    "name *= 'Chrome'",
    "class_g = 'Firefox' && argb",
    "class_g = 'Conky'",
    "class_g = 'Kupfer'",
    "class_g = 'Synapse'",
    "class_g ?= 'Notify-osd'",
    "class_g ?= 'Cairo-dock'",
    "class_g ?= 'Xfce4-notifyd'",
    "class_g ?= 'Xfce4-power-manager'",
    "class_g ?= 'Dmenu'",
    "class_g ?= 'Dunst'",
    "bounding_shaped && !rounded_corners",
# disables shadows on i3 frames
    "class_g ?= 'i3-frame'",
    "_GTK_FRAME_EXTENTS@:c",
    "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
];

#=== Fading ===#

# Fade windows during opacity changes.
fading = true;
# The time between steps in a fade in milliseconds. (default 10, manjaro 1).
fade-delta = 2;
# Opacity change between steps while fading in. (default 0.028).
fade-in-step = 0.028;
# Opacity change between steps while fading out. (default 0.03).
fade-out-step = 0.03;
# Fade windows in/out when opening/closing
no-fading-openclose = false;

# Specify a list of conditions of windows that should not be faded.
fade-exclude = [ "name =  '13lock'" ];

#=== Transparency / Opacity ===#

# Default active windows opacity (0.0 - 1.0)
active-opacity = 1;
# Default inactive windows opacity (0.0 - 1.0)
inactive-opacity = 1;
# Default opacity for titlebars and borders (0.1 - 1.0)
frame-opacity = 1;

# Let the value set by 'inactive-opacity' override that of _NET_WM_OPACITY.
# It's usually a BAD idea.
incactive-opacity-override = false;

#If using these 2 below change their values in Wintipes as well
popup_menu = { opacity = 0.9; }
dropdown_menu = { opacity = 0.9; }

# Set the default opacity of certain windows.
 opacity-rule = [
    # "80:class_g = 'Alacritty'",
    "100:class_g = 'firefox' && focused",
    "100:class_g = 'firefox' && !focused"
];

# Specify a list of conditions of windows that should always be considered focused.
focus-exclude = [
    "class_g = 'Cairo-clock'",
# Keeps rofimenu opaque
# Comment the line below for transparent rofimmenu
# (level is tied to inactive-opacity
    # "x = 0 && y = 24 && override_redirect = true"
];

# Dim inactive windows. (0.0 - 1.0)
inactive-dim = 0.1;
# Do not let dimness adjust based on window opacity.
# inactive-dim-fixed = true;

#=== Background Blurring ===#

# Parameters for background blurring, see the *BLUR* section for more information.
# blur-method =
# blur-size = 12
#
# blur-deviation = false

# Blur background of semi-transparent / ARGB windows.
# Bad in performance, with driver-dependent behavior.
# The name of the switch may change without prior notifications.
#
# blur-background = true;

# Blur background of windows when the window frame is not opaque.
# Implies:
#    blur-background
# Bad in performance, with driver-dependent behavior. The name may change.
#
# blur-background-frame = false;

# Use fixed blur strength rather than adjusting according to window opacity.
# blur-background-fixed = false;


# Specify the blur convolution kernel, with the following format:
# example:
#   blur-kern = "5,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1";
#
# blur-kern = ''
# blur-kern = "3x3box";

blur: {
  # requires: https://github.com/ibhagwan/picom
  method = "dual_kawase";
  #method = "kernel";
  strength = 4;
  # deviation = 1.0;
  # kernel = "11x11gaussian";
  background = false;
  background-frame = false;
  background-fixed = false;
  kern = "3x3box";
};

# Exclude conditions for background blur.
blur-background-exclude = [
  #"window_type = 'dock'",
  #"window_type = 'desktop'",
  #"class_g = 'URxvt'",
  #
  # prevents picom from blurring the background
  # when taking selection screenshot with `main`
  # https://github.com/naelstrof/maim/issues/130
  "class_g = 'slop'",
  "_GTK_FRAME_EXTENTS@:c"
];

#=== General Settings ===#

# Try to detect WM windows and mark them as active. (default true)
mark-wmwin-focused = true;
# Mark all non-WM but override-redirect windows active (e.g. menus, default true).
mark-ovredir-focused = true;

# Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of
# using FocusIn/Out events. Usually more reliable but depends on a EWMH-compliant WM.
# A list of compliant WM can be found here:
# https://en.wikipedia.org/wiki/Extended_Window_Manager_Hints
use-ewmh-active-win = true;

# Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
# Low accuracy, but better than nothing
detect-rounded-corners = true;

# Detect _NET_WM_OPACITY on client windows, useful for window managers
# not passing _NET_WM_OPACITY of client windows to frame windows.
# This prevents opacity being ignored for some apps.
# For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
detect-client-opacity = true;

# Specify refresh rate of the screen.
# If not specified or 0, picom will try detecting this with X RandR extension.
# Important for --sw-opti.
refresh-rate = 0;

# Vertical synchronization: match the refresh rate of the monitor
vsync = true;

# Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
# Reported to have no effect, though.
dbe = true;

# Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
# This should not be used with --vsync drm/opengl/opengl-oml as they essentially does
# --sw-opti's job already, unless you wish to specify a lower refresh rate than the actual value.
#sw-opti = true;

# Unredirect all windows if a full-screen opaque window is detected,
# to maximize performance for full-screen windows, like games.
# Known to cause flickering when redirecting/unredirecting windows.
# >>>>>>DISABLE IF FLICKERING
unredir-if-possible = true;

# Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
detect-transient = true;
# Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
# WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
detect-client-leader = true;

#=== Window type settings ===#

# fade: fade the particular type of windows.
# shadow: give those windows shadow.
# opacity: default opacity for the type of windows.
# focus: whether to always consider windows of this type focused.
# full-shadow: whether the shadow is drawn under parts of the windows normally
#              hidden.
# redir-ignore: whether this windows should cause the screen to become
#               redirected again after being unredirected.

wintypes :
{
    # combo :
    # {
    #     fad e= true;
    #     shadow = true;
    #     opacity = 1;
    #     focus = true;
    # };
    dialog :
    {
        fade = true;
        shadow = true;
        opacity = 1;
        focus = false;
    };
    dnd :
    {
        fade = true;
        shadow = false;
        opacity = 1;
        focus = true;
    };
    dropdown_menu :
    {
        fade = true;
        shadow = false;
        opacity = 0.9;
        focus = true;
    };
    fullscreen :
    {
        fade = true;
        shadow = false;
        opacity = 1;
        focus = true;
    };
    menu :
    {
        fade = true;
        shadow = false;
        opacity = 1;
        focus = true;
    };
#   normal :
#   {
#       fade = true;
#       shadow = true;
#       opacity = 1;
#       focus = false;
#   };
    notify :
    {
        fase = true;
        shadow = true;
        opacity = 0.9;
        focus = true;
    };
    popup_menu :
    {
        fade = true;
        shadow = true;
        opacity = 0.9;
        focus = true;
    };
    splash :
    {
        fade = true;
        shadow = false;
        opacity = 1;
        focus = true;
    };
    tooltip :
    {
        fade = true;
        shadow = false;
        opacity = 0.9;
        focus = true;
        full-shadow = false;
    };
    dock :
    {
        fade = true;
        shadow = false;
        opacity = 1;
        focus = true;
    };
    toolbar :
    {
        fade = true;
        shadow = false;
        opacity = 1;
        focus = true;
    };
       utility :
    {
        fade = true;
        shadow = false; # keep this disabled to avoid artifacts in Firefox menus
        opacity = 1;
        focus = true;
    };
    unknown :
    {
        fade = true;
        shadow = true;
        opacity = 1;
        focus = true;
    };

};

#=== XSync ===#
# See: https://github.com/yshui/picom/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d

# Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
xrender-sync-fence = true;

